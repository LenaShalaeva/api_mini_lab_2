{"version":3,"sources":["js/utils.js","js/main.js"],"names":["formValues","formValidation","setValue","id","document","getElementById","value","changeFormValidation","password","passwordreg","email","emailreg","disabled","validatePassword","console","log","password_length","length","reg","RegExp","activeElement","match","validateEmail","String","toLowerCase","getValidationStatus","Object","values","every","validationStatus","setFormValue","valueKey","newValue","validator","button","undefined","classList","add","remove","submitSignUpForm","first_name_id","last_name_id","password_id","email_id","sign_in_link_id","sign_up_form_id","sign_up_btn_id","sign_in_link_id_reg","sign_in_form_id","btnsgnup","btnsgnin","emails","querySelectorAll","oninput","e","target","passwords","switch_to_sign_in","onclick","style","display","sign_up_btn","preventDefault","switch_to_sign_in_reg"],"mappings":";AAmIO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,iBAAA,QAAA,cAAA,QAAA,iBAAA,QAAA,SAAA,QAAA,aAAA,QAAA,oBAAA,QAAA,0BAAA,EAnIP,IAAMA,EAAa,GACbC,EAAiB,CAEvBA,UAA0B,EAC1BA,aAA6B,EAC7BA,OAAuB,EACvBA,UAA0B,GAEbC,EAAW,SAACC,GACRC,SAASC,eAAeF,GAChCG,MAAQ,IAyHV,QAAA,SAAA,EAtHA,IAAMC,EAAuB,WAClCL,EAAS,YACTA,EAAS,eACTA,EAAS,SACTA,EAAS,YACTD,EAAeO,UAAW,EAC1BP,EAAeQ,aAAc,EAC7BR,EAAeS,OAAQ,EACvBT,EAAeU,UAAW,EACXP,SAASC,eAAe,eAC/BO,UAAW,EACJR,SAASC,eAAe,eAC/BO,UAAW,GA0Gd,QAAA,qBAAA,EApGA,IAAMC,EAAmB,SAACL,GAE/BM,QAAQC,IAAI,0BAKZ,IAAIC,EAAkBR,EAASS,OAGvBC,EAAM,IAAIC,OAAO,6BACHf,SAASgB,cAAcjB,GAgBzC,OAbqB,GAAnBa,GAAwBA,GANlB,IAM4CA,EAL5C,IAKsER,EAASa,MAAMH,IAE3FjB,EAAeO,UAAW,EAC1BM,QAAQC,IAAI,UAKVd,EAAeO,UAAW,EAKvBP,EAAeO,UAyErB,QAAA,iBAAA,EApEA,IAAMc,EAAgB,SAACZ,GAI5B,OAAiD,MAA7Ca,OAAOb,GAAOc,cAAcH,MADjB,0JAiEV,QAAA,cAAA,EAlDA,IAAMI,EAAsB,WAIjC,OAAOC,OAAOC,OAAO1B,GAAgB2B,MAAM,SAACC,GAAD,QAAwBA,KA8C9D,QAAA,oBAAA,EAzCA,IAAMC,EAAe,SAACC,EAAUC,EAAUC,GAM/C,IAAIC,EAJFpB,QAAQC,IAAId,QACIkC,IAAdF,IACFhC,EAAe8B,GAAYE,EAAUD,IAGvC,IAAMvB,EAAcL,SAASC,eAAe0B,GAEZ,GAA5B9B,EAAe8B,IAEbtB,EAAY2B,UAAUC,IAAI,YAEtBH,EADY,YAAZH,GAAsC,SAAZA,EACjB3B,SAASC,eAAe,eAGxBD,SAASC,eAAe,gBAE9BO,UAAW,IAGlBH,EAAY2B,UAAUE,OAAO,WAC7B7B,EAAY2B,UAAUC,IAAI,SAEtBH,EADY,YAAZH,GAAsC,SAAZA,EACjB3B,SAASC,eAAe,eAGxBD,SAASC,eAAe,gBAGH,GAA9BJ,EAAc,UAAmD,GAA3BA,EAAc,OAAwD,GAAjCA,EAAc,aAAyD,GAA9BA,EAAc,YACjIiC,EAAOtB,UAAW,KAUxB,QAAA,aAAA,EAAA,IAAM2B,EAAmB,WAC9B,OAAKd,KAILX,QAAQC,IAAI,gBACZD,QAAQC,IAAIf,IACL,IALLc,QAAQC,IAAI,sBACL,IAHJ,QAAA,iBAAA;;ACnCP,aAhGA,IAAA,EAAA,QAAA,cAgGA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,oBAAA,QAAA,EAAA,OAAA,WAAA,EAAA,cAAA,IAAA,EAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,KAAA,GAAA,GAAA,iBAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,KAAA,IAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAzFA,IAAMP,EAAWJ,SAASC,eAAe,YACzCG,EAAS4B,UAAUC,IAAI,SACvB7B,EAAS4B,UAAUE,OAAO,SAI1BxB,QAAQC,IAAI,YACZD,QAAQC,IAAIX,UAmBZ,IAAMoC,EAAgB,aAChBC,EAAe,YACfC,EAAc,WACdC,EAAW,QAEXC,EAAkB,eAClBC,EAAkB,eAClBC,EAAiB,cACjBC,EAAsB,mBACtBC,EAAkB,eAGpBC,EAAW7C,SAASC,eAAe,eACvC4C,EAASrC,UAAW,EAEpB,IAAIsC,EAAW9C,SAASC,eAAe,eACvC6C,EAAStC,UAAW,EAapB,IAAMuC,EAAS/C,SAASgD,iBAAiB,qBACzCtC,QAAQC,IAAIoC,GACQA,IAgCpB,EAhCoBA,EAAAA,EAAAA,GAgCpB,IAAA,IAAA,EAAA,WAhCWzC,IAAAA,EAAAA,EAAAA,MACPA,EAAM2C,QAAU,SAACC,GAAD,OAAO,EAAAxB,EAAA,cAAapB,EAAMP,GAAImD,EAAEC,OAAOjD,MAAOgB,EAAvC,iBAD3B,IAA4B,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,IAgC5B,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IA3BA,IAAMkC,EAAYpD,SAASgD,iBAAiB,2BAC5CtC,QAAQC,IAAIyC,GACWA,IAyBvB,EAzBuBA,EAAAA,EAAAA,GAyBvB,IAAA,IAAA,EAAA,WAzBWhD,IAAAA,EAAAA,EAAAA,MACPA,EAAS6C,QAAU,SAACC,GAAD,OAAO,EAAAxB,EAAA,cAAatB,EAASL,GAAImD,EAAEC,OAAOjD,MAAOO,EAA1C,oBAD9B,IAAkC,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,IAyBlC,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IAjBA,IAAM4C,EAAoBrD,SAASC,eAAeuC,GAClDa,EAAkBC,QAAU,SAACJ,GAC3BlD,SAASC,eAAewC,GAAiBc,MAAMC,QAAU,OACzDxD,SAASC,eAAe2C,GAAiBW,MAAMC,QAAU,GACzDrD,wBAIF,IAAMsD,EAAczD,SAASC,eAAeyC,GAC5Ce,EAAYH,QAAU,SAACJ,GAGrBA,EAAEQ,kBACF,EAAAvB,EAAA,qBAGF,IAAMwB,EAAwB3D,SAASC,eAAe0C,GACtDgB,EAAsBL,QAAU,SAACJ,GAC/BlD,SAASC,eAAewC,GAAiBc,MAAMC,QAAU,GACzDxD,SAASC,eAAe2C,GAAiBW,MAAMC,QAAU,OACzDrD","file":"main.fa7a5316.js","sourceRoot":"..","sourcesContent":["const formValues = {}  // Сюда пишутся значения формы (Object как в Java, или dict из Python)\r\nconst formValidation = {}  // Сюда пишутся статусы валидации каждого поля. Если поле ни разу не валидировалось,\r\n// то при обращении к Object вернётся undefined, который при логическом сравнении обрабатывается как false\r\nformValidation.password = false\r\nformValidation.passwordreg = false\r\nformValidation.email = false\r\nformValidation.emailreg = false\r\n\r\nexport const setValue = (id) => {\r\n  const object = document.getElementById(id);\r\n  object.value = \"\"\r\n}\r\n\r\nexport const changeFormValidation = () => {\r\n  setValue(\"password\")\r\n  setValue(\"passwordreg\")\r\n  setValue(\"email\")\r\n  setValue(\"emailreg\")\r\n  formValidation.password = false\r\n  formValidation.passwordreg = false\r\n  formValidation.email = false\r\n  formValidation.emailreg = false\r\n  var btnsgnup = document.getElementById('sign_up_btn');\r\n btnsgnup.disabled = true;\r\n  var btnsgnin = document.getElementById('sign_in_btn');\r\n btnsgnin.disabled = true;\r\n}\r\n\r\n\r\n// Объявляется и инициализируется константная переменная\r\n// Инициализация функцией, заданной в стрелочном виде\r\nexport const validatePassword = (password) => {\r\n  //formValidation.password = e.target.value\r\n  console.log(\"Password validation...\")\r\n  //console.log(e)\r\n  // Напишите код валидации здесь и присвойте true/false в объект(словарь) formValidation\r\n  // formValidation.password = ...  // formValidation['password'] = ... - то же самое, но другой синтаксис\r\n  //return formValidation.password !== undefined   // Это заглушка, return вероятно надо переписать\r\n  var password_length = password.length;\r\n    var max = 15;\r\n    var min = 6;\r\n    const reg = new RegExp('(?=.*[0-9])(?=.*[a-zA-Z])');\r\n    const password_id = document.activeElement.id\r\n    //const password_1 = document.getElementById(password_id);\r\n    //var baton = document.getElementById('sign_up_btn');\r\n    if (password_length == 0 || password_length >= max || password_length < min || !password.match(reg))\r\n    {\r\n        formValidation.password = false;\r\n        console.log(\"Error\")\r\n        //password_1.classList.add(\"invalid\")\r\n        //baton.disabled = true;\r\n      }\r\n      else{\r\n          formValidation.password = true;\r\n          //password_1.classList.remove(\"invalid\")\r\n         // password_1.classList.add(\"valid\")\r\n         // baton.disabled = false;\r\n      }\r\n      return formValidation.password;\r\n  }\r\n\r\n\r\n\r\nexport const validateEmail = (email) => {\r\n  // Создадим шаблон регулярного выражения. В нём применяются шаблонные строки\r\n  // Гуглить по тегам: \"шаблонные строки js\", \"регулярные выражения\"\r\n  const regExp = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n  if (String(email).toLowerCase().match(regExp) == null){\r\n    return false\r\n    }\r\n  else{\r\n    return true\r\n  }\r\n\r\n  //return String(email)\r\n    //.toLowerCase()\r\n    //.match(regExp);\r\n}\r\n\r\n\r\n// Функция возвращающая true если все валидации пройдены, и false если хотя бы одна не пройдена\r\nexport const getValidationStatus = () => {\r\n  // Происходит функциональная мгаия, читай строчку кода ниже как:\r\n  // Получить значения (не ключи) из объекта, затем применить к каждому значению функцию двойного логического отрицания\r\n  // (преобразование к булевому типу) и результаты всех применений это true, то вернуть true, иначе - false\r\n  return Object.values(formValidation).every((validationStatus) => !!validationStatus)\r\n}\r\n\r\n\r\n// Функция возвращающая которая ставит значение поля в форме по ключу\r\nexport const setFormValue = (valueKey, newValue, validator) => {\r\n  //formValues[valueKey] = newValue\r\n    console.log(formValidation)\r\n  if (validator !== undefined) {\r\n    formValidation[valueKey] = validator(newValue)\r\n  }\r\n  var button;\r\n  const passwordreg = document.getElementById(valueKey);\r\n\r\n  if (formValidation[valueKey] == false)\r\n    {\r\n        passwordreg.classList.add(\"invalid\")\r\n        if (valueKey == \"password\" || valueKey == \"email\"){\r\n            button = document.getElementById('sign_up_btn')\r\n        }\r\n        else {\r\n            button = document.getElementById('sign_in_btn')\r\n        }\r\n        button.disabled = true;\r\n    }\r\n  else{\r\n        passwordreg.classList.remove(\"invalid\")\r\n        passwordreg.classList.add(\"valid\")\r\n        if (valueKey == \"password\" || valueKey == \"email\"){\r\n            button = document.getElementById('sign_up_btn')\r\n        }\r\n        else {\r\n            button = document.getElementById('sign_in_btn')\r\n        }\r\n        \r\n        if((formValidation[\"password\"] == true && formValidation[\"email\"] == true) || (formValidation[\"passwordreg\"] == true && formValidation[\"emailreg\"] == true) ) {\r\n             button.disabled = false;\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n// Функция для обработки отправки формы регистрации\r\n// В этой функции должен быть http запрос на сервер для регистрации пользователя (сейчас просто демонстрация)\r\nexport const submitSignUpForm = () => {\r\n  if (!getValidationStatus()) {\r\n    console.log(\"FORM IS INCORRECT\")\r\n    return false\r\n  }\r\n  console.log(\"FORM IS FINE\")\r\n  console.log(formValues)\r\n  return true\r\n}\r\n","import {setFormValue, submitSignUpForm, validateEmail, validatePassword} from \"./utils.js\"\r\n\r\n\r\n////// ДЕМОНСТРАЦИОННЫЙ УЧАСТОК КОДА. На оценку не влияет, исключительно для саморазвития.\r\n\r\n// Предлагаю \"поиграться\" с частями кода ниже, чтобы познакомиться с JS\r\n// Получаем элемент и меняем его класс, который определеён в библиотеке стилей materialize\r\nconst password = document.getElementById('password');\r\npassword.classList.add(\"valid\")\r\npassword.classList.remove(\"valid\")\r\n\r\n// В браузере можно посмотреть, что из себя представляет документ\r\n// (CTRL+SHIFT+i для открытия консоли и открыть вкладку \"консоль\", туда будет залогированно значение)\r\nconsole.log(\"Document\")\r\nconsole.log(document)\r\n\r\n// Если запросить id, которого нет в DOM дереве - вернется undefined\r\n// => надо быть осторожней: коллега может поменять id вашего элемента и упадёт !ВАШ! код\r\n// const first_name = document.getElementById('first_name_invalid');\r\n// first_name.oninput = (e) => validatePassword(e)\r\n\r\n// Селекция по классу. Может пригодится, для того, чтобы упростить обработку полей в двух формах.\r\n// Чтобы не делать кучу уникальных айди, можно определённым полям формы давать один класс и обрабатывать их в цикле\r\n// const passwords = document.querySelectorAll('.password')\r\n// console.log(passwords)\r\n// for (const password of passwords) {\r\n//   password.style.background = \"red\"\r\n// }\r\n\r\n////// КОНЕЦ ДЕМОНСТРАЦИОННОГО УЧАСТКА КОДА. Дальше код для оцениваемой части задания\r\n\r\n\r\n// Выписываем все айдишники HTMl-элементов в константы для переиспользования\r\nconst first_name_id = 'first_name'\r\nconst last_name_id = 'last_name'\r\nconst password_id = 'password'\r\nconst email_id = 'email'\r\n\r\nconst sign_in_link_id = 'sign_in_link'\r\nconst sign_up_form_id = 'sign_up_form'\r\nconst sign_up_btn_id = 'sign_up_btn'\r\nconst sign_in_link_id_reg = 'sign_in_link_reg'\r\nconst sign_in_form_id = 'sign_in_form'\r\n\r\n\r\nvar btnsgnup = document.getElementById('sign_up_btn');\r\nbtnsgnup.disabled = true;\r\n\r\nvar btnsgnin = document.getElementById('sign_in_btn');\r\nbtnsgnin.disabled = true;\r\n\r\n// Получаем элемент DOM-дерева по id и присваиваем значение аттрибуту oninput\r\n// oninput вызывается с параметром \"event\" каждый раз, когда ввод меняется\r\n// Значение, которое мы присваеваем этому аттрибуту - это функция, определённая в стрелочном стиле\r\n// Гуглить по тегам \"события JS\", \"onchange/oninput HTML\", \"стрелочные функции JS\", ...\r\n\r\n//const first_name = document.getElementById(first_name_id);\r\n//first_name.oninput = (e) => setFormValue(first_name_id, e.target.value)  // Установить значение без валидации\r\n\r\n//const email = document.getElementById(email_id);\r\n//email.oninput = (e) => setFormValue(email_id, e.target.value, validateEmail) // Установить значение с валидацией\r\n\r\nconst emails = document.querySelectorAll(\"#email, #emailreg\")\r\nconsole.log(emails)\r\nfor (const email of emails) {\r\n    email.oninput = (e) => setFormValue(email.id, e.target.value, validateEmail) // Установить значение с валидацией\r\n}\r\n\r\n\r\nconst passwords = document.querySelectorAll(\"#password, #passwordreg\")\r\nconsole.log(passwords)\r\nfor (const password of passwords) {\r\n    password.oninput = (e) => setFormValue(password.id, e.target.value, validatePassword) // Установить значение с валидацией\r\n}\r\n\r\n\r\n\r\n// Меняем стили объекта DOM дерева. Это позволяет скрыть форму регистрации и показать форму авторизации\r\n// Объект формы не исключается из DOM дерева, а просто становистя невидимым\r\nconst switch_to_sign_in = document.getElementById(sign_in_link_id);\r\nswitch_to_sign_in.onclick = (e) => {\r\n  document.getElementById(sign_up_form_id).style.display = \"none\"\r\n  document.getElementById(sign_in_form_id).style.display = \"\"\r\n  changeFormValidation()\r\n}\r\n\r\n\r\nconst sign_up_btn = document.getElementById(sign_up_btn_id);\r\nsign_up_btn.onclick = (e) => {\r\n  // При нажатии кнопки в форме по умолчанию происходит перезагрузка страницы.\r\n  // Чтобы отключить его, нужно отменить стандартное поведение события\r\n  e.preventDefault()\r\n  submitSignUpForm()\r\n}\r\n\r\nconst switch_to_sign_in_reg = document.getElementById(sign_in_link_id_reg);\r\nswitch_to_sign_in_reg.onclick = (e) => {\r\n  document.getElementById(sign_up_form_id).style.display = \"\"\r\n  document.getElementById(sign_in_form_id).style.display = \"none\"\r\n  changeFormValidation()\r\n}\r\n\r\n"]}